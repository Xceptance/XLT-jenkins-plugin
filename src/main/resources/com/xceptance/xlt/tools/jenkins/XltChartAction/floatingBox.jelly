<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
		<j:set var="width" value="${from.getPlotWidth()}"/>
		<j:set var="height" value="${from.getPlotHeight()}"/>
		
		<j:set var="imgDivStyle" value="display:inline-block;"/>
		<j:if test="${from.isPlotVertical()}">
			<j:set var="imgDivStyle" value=""/>
		</j:if>		
		
		<style>
			.flotr-grid-label-y{
				text-align:left !important;
				left:auto !important;
				right:${width+5}px !important;				
			}	
			
			.flotr-grid-label-x{
				/*direction: rtl;*/
				text-align: left !important;
    			transform: translate(50%, 0%) rotate(25deg);
    			transform-origin: left top;    			
    			-webkit-transform: translate(50%, 0%) rotate(25deg);
    			-webkit-transform-origin: left top;
    			-o-transform: translate(50%, 0%) rotate(25deg);
    			-o-transform-origin: left top;
    			-moz-transform: translate(50%, 0%) rotate(25deg);
    			-moz-transform-origin: left top;
    			-ms-transform: translate(50%, 0%) rotate(25deg);
    			-ms-transform-origin: left top;    			
    			white-space: nowrap;
			}
		</style>
				
		<div align="left" style="margin:10px;">					
			<br/>
			<div align="left">
				<div align="right"><b>${from.getTitle()}</b></div><hr/>			
				<img src="${resURL}/plugin/xlt-jenkins-plugin/logo.png" height="16"/>
				<j:if test="${from.isTrendReportAvailable()}">
					<a style="margin-left:20px" href="${from.getUrlName()}/trendReport/index.html">
						<b>Trend Report</b>
					</a>
				</j:if>
				<j:if test="${from.isSummaryReportAvailable()}">
					<a style="margin-left:20px" href="${from.getUrlName()}/summaryReport/index.html">
						<b>Summary Report</b>
					</a>
				</j:if>
			</div>	
			
			<j:if test="${from.getCharts().isEmpty() == false}">
				<!-- Chart Section -->		
					
				<div>			
					<script type="text/javascript" src="${resURL}/plugin/xlt-jenkins-plugin/flotr2.min.js"></script>
					<j:forEach var="eachChart" items="${from.getCharts()}" varStatus="loopStat">
						
						<j:set var="plotContainerID" value="$plotContainer-${eachChart.getChartID()}-${from.getBuilderID()}" />
	
						<div style="${imgDivStyle}width:${width+100}px;height:${height+100}px;margin:0 0 50px 0;}">
							<center>
								<b>${eachChart.getTitle()}</b><br/>
								<div id="${plotContainerID}" style="border: 1px solid #BBBBBB; box-shadow: 1px 2px 6px -3px #555555;width:${width}px;height:${height}px;"></div>
							</center>
						    <script type="text/javascript">
							(function(){
								var xData = ${eachChart.getXData()};		
								var xDataCount = 0;	for (eachKey in xData){ if (xData.hasOwnProperty(eachKey)){ xDataCount++; }}		
								var data = ${eachChart.getDataString('function(lineName, o, xData){ try{ var data = xData[""+parseInt(o.x)]; return "&lt;div align=\"left\" &gt;" + lineName +": "+o.y+"&lt;br&gt;Build: "+data.buildNumber + "&lt;br&gt;" + "Date: " + data.buildTime + "&lt;/div&gt;" }catch(e){ return "Unexpected" }}')};						
						        var container = document.getElementById('${plotContainerID}');						         
						        var config = { 
						        	yaxis:{ 
						        		min:0,
						        		max:null,
										tickDecimals:0,		
										tickFormatter:function(o){ return o},
										margin:false,
										autoscale:true,
										autoscaleMargin:0.1,							
									},
									xaxis:{
										min:null,
										max:null,
										tickDecimals:0,
										tickFormatter:function(o){ if(xDataCount === 1){var index = parseInt(o); if(index &lt;xDataCount-1 || index &gt;xDataCount-1){ return ""; }} try{ var data = xData[""+o]; if(data === undefined){ return "No Value";} var message = ''; if(data.showBuildNumber){ message += '#'+data.buildNumber + " "; }; message += data.buildTime; return message }catch(e){ return "Unexpected" }},
										margin:false,
									},
									selection: {
										show:true,				
							            mode: 'xy',
							            fps: 25,
							        },			
							        lines:{
							        	show:true,
							        },
							        points:{
							        	show:(xDataCount === 1 ? true : false),
							        },
							        grid:{
							        	verticalLines: false,
										outlineWidth:1,
										outline:'s',
							        },
							        mouse:{
							        	track:true,
							        	trackAll:false,
							        	position:'se',
							        	relative:true,
							        	margin:15,
							        	radius:3,
							        	sensibility:10,
							        },	   
								};
								var currentConfig = Flotr.clone(config);
						        var graph;
						        var mousePressed = false;
						        var mouseOver = false;
						        
								function drawGraph(options){
									currentConfig = Flotr.merge(options, currentConfig);
									return Flotr.draw(container, data, currentConfig);
								}
								
								function resetGraph(options){
									return drawGraph(Flotr.clone(config))
								}						
								
								graph = drawGraph({});
								
								var canvasContainer = container.childNodes[1];
								canvasContainer.addEventListener ('mouseover', function() { mouseOver = true; if(mousePressed == false) drawGraph({legend:{show:false,},mouse:{track:true}}) }, false);
								canvasContainer.addEventListener ('mouseout', function() { mouseOver = false; if(mousePressed == false) drawGraph({legend:{show:true,},mouse:{track:false}}) }, false);
								
								document.body.addEventListener ('mousedown', function() { mousePressed = true; }, false);
								document.body.addEventListener ('mouseup', function() { mousePressed = false; }, false);
								
		 						Flotr.EventAdapter.observe(container, 'flotr:mousemove', function(e, pos) {
		 							//console.log("x:"+canvasContainer.width/2+"  posRelX:"+Math.floor(pos.relX)+" posX:"+pos.x);
		  							if(mousePressed == false){
		 								var location = ''; 		
		 								if(pos.relY > canvasContainer.height/2){
											location += 'n';
										}else{
											location += 's';
										}					
										if(pos.relX > canvasContainer.width/2){
											location += 'w';
										}else{
											location += 'e';
										}
										
										if(location.length == 2 &amp;&amp; currentConfig.mouse.position != location)
											drawGraph({mouse:{position:location,}});								
									}
							    });
							    				
								// Hook into the 'flotr:select' event.
							    Flotr.EventAdapter.observe(container, 'flotr:select', function(area) {													
							        // Draw graph with new area
							        var newConfig = {
							            xaxis: {
							                min: area.x1,
							                max: area.x2
							            },
							            yaxis: {
							                min: area.y1,
							                max: area.y2
							            },
							            points:{
							        		show:true
							        	},
							        	legend:{
							        		show:false,
							        	},					            
							        };
							        
							        if(mouseOver == false){
							        	newConfig.legend.show = true;
							        }					        	
							        
							        drawGraph(newConfig);
							    });					    
							
							    // When graph is clicked, draw the graph with default area.
							    Flotr.EventAdapter.observe(container, 'flotr:click', function() {
									resetGraph({});
							    });
							})();    
							</script>
						</div>
						
					</j:forEach>
				</div>
			</j:if>
		</div>
</j:jelly>